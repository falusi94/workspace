# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.ruby':
  'Def initialize':
    'prefix': 'defi'
    'body': 'def initialize\n  $1\nend'
  'Def self method':
    'prefix': 'defs'
    'body': 'def self.${1:method_name}\n  $2\nend'
  'Def method with rescue':
    'prefix': 'defr'
    'body': 'def ${1:method_name}\n  $2\nrescue ${3:StandardError} => e\n$4\nend'
  'Def initialize with params':
    'prefix': 'defia'
    'body': 'def initialize(${1:params})\n  $2\nend'
  'Def self method with params':
    'prefix': 'defsa'
    'body': 'def self.${1:method_name}(${2:params})\n  $3\nend'
  'Def method with params':
    'prefix': 'defa'
    'body': 'def ${1:method_name}(${2:params})\n  $3\nend'
  'Add debugger':
    'prefix': 'de'
    'body': 'debugger'
  'Add rescue statement':
    'prefix': 're'
    'body': 'rescue ${1:StandardError} => e\n$2'
  'Def class':
    'prefix': 'cl'
    'body': 'class ${1:ClassName}\n$2\nend'
  'Def begin-rescue-end':
    'prefix': 'be'
    'body': 'begin\n  $1\nrescue ${2:StandardError} => e\n  $3\nend'
  'Def module':
    'prefix': 'mod'
    'body': 'module ${1:ModuleName}\n$2\nend'
  'Attr reader':
    'prefix': 'atr'
    'body': 'attr_reader :$1'
  'Attr accessor':
    'prefix': 'ata'
    'body': 'attr_accessor :$1'
  'Magic comment # frozen_string_literal: true':
    'prefix': 'fro'
    'body': '# frozen_string_literal: true'
  'RSpec shared examples block':
    'prefix': 'sha'
    'body': 'shared_examples \'${1:wanna share this}\' do\n  $2\nend'
  'RSpec it_behaves_like':
    'prefix': 'ibl'
    'body': 'it_behaves_like \'${1:this shared example}\''
  'FactoryBot init':
    'prefix': 'fact'
    'body': 'FactoryBot.define do\n  factory :${1:model} do\n    $2\n  end\nend'
  'RSpec context block':
    'prefix': 'con'
    'body': 'context \'${1:when something is}\' do\n  $2\nend'
  'RSpec it block':
    'prefix': 'it'
    'body': 'it \'${1:does it}\' do\n  $2\nend'
  'RSpec describe block':
    'prefix': 'desc'
    'body': 'describe \'${1:describe it}\' do\n  $2\nend'
  'RSpec let block':
    'prefix': 'let'
    'body': 'let(:${1:it_be}) { $2 }'
  'RSpec let! block':
    'prefix': 'let!'
    'body': 'let!(:${1:it_be}) { $2 }'
  'RSpec subject block':
    'prefix': 'subj'
    'body': 'subject { ${1:do_it} }'
  'RSpec described_class':
    'prefix': 'dc'
    'body': 'described_class'
  'RSpec before block':
    'prefix': 'bef'
    'body': 'before { ${1:i_test} }'
  'RSpec expect':
    'prefix': 'exp'
    'body': 'expect(${1:anything}).${2:to} ${3:everything}'
  'FactoryBot traits':
    'prefix': 'trait'
    'body': 'trait :${1:with_pony_tail} do\n  $2\nend'
  'Private modifier':
    'prefix': 'pr'
    'body': 'private'
  'Turnip step':
    'prefix': 'st'
    'body': 'step \'$1\' do\n  $2\nend'
  'Each block':
    'prefix': '.ea'
    'body': '.each do |${1:element}|\n  $2\nend'
  'Map block':
    'prefix': '.ma'
    'body': '.map do |${1:element}|\n  $2\nend'

'.source.js':
  'Arrow function':
    'prefix': 'ff'
    'body': '($1) => { $2 }'
  'Arrow function (multiline)':
    'prefix': 'fm'
    'body': '($1) => {\n  $2\n}'
  'I\'m from the ruby world':
    'prefix': 'nil'
    'body': 'null'
  'Export const function':
    'prefix': 'expf'
    'body': 'export const ${1:function} = ($2) => { $3 }'
  'It block':
    'prefix': 'it'
    'body': 'it(\'${1:does everything}\', () => {\n  ${2:do it}\n});'
  'Describe block':
    'prefix': 'desc'
    'body': 'describe(\'${1:the meaning of the life}\', () => {\n  ${2:it should}\n});'
  'Disable ESlint':
    'prefix': 'esld'
    'body': '/* eslint-disable */\n'
  'DEBUG log':
    'prefix': 'dl'
    'body': 'console.log(\'DEBUG: \' + $1);'
  'Import from':
    'prefix': 'imf'
    'body': 'import $1 from \'$2\';'
  'Import':
    'prefix': 'im'
    'body': 'import \'$1\';'

'.source.jsx':
  'Div':
    'prefix': 'di'
    'body': '<div$2>$1</div>'
  'Anchor':
    'prefix': 'a'
    'body': '<a href="${1:link}">$2</a>'
  'Paragraph':
    'prefix': 'p'
    'body': '<p>$1</p>'
  'Empty tag':
    'prefix': '<'
    'body': '<${1:Tag}>$2</${1:Tag}>'
  'Self closing tag':
    'prefix': '</'
    'body': '<${1:Tag} />'
